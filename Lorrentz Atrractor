{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# The Lorenz Attractor"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The dynamics of the Lorenz system is governed by the following differential equations:\n",
                "\n",
                "$$ \\frac{\\mathrm{d}x}{\\mathrm{d}t} = \\sigma ( y - x) $$\n",
                "\n",
                "$$ \\frac{\\mathrm{d}y}{\\mathrm{d}t} = x ( \\rho - z) - y $$\n",
                "\n",
                "$$ \\frac{\\mathrm{d}z}{\\mathrm{d}t} = x y  - \\beta z $$\n",
                "\n",
                "These equations were derived for a simple model of convection, but arise in a number of models for different physical systems.   \n",
                "It is notable for having chaotic solutions for certain parameters and initial conditions.\n",
                "\n",
                "In this notebook, we will first examine the trajectory $(x (t), y (t), z(t))$ for fixed values of the parameters  $\\rho, \\sigma, \\beta$, and then consider how the dynamics is affected by changing these values."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "#imports\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "\n",
                "from scipy.integrate import odeint                 # for solving ODEs\n",
                "from mpl_toolkits.mplot3d import Axes3D            # for 3D plots\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Fixed parameters\n",
                "Let's consider the standard parameter values used to illustrate the Lorenz Attractor\n",
                " $$\\rho = 28, \\sigma = 10, \\beta = \\frac{8}{3}$$"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "frho = 28.0\n",
                "fsigma = 10.0\n",
                "fbeta = 8.0/3.0"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "To solve the differential equation, we will use the odeint routine in scipy.   \n",
                "\n",
                "From the documention for this routine, it is called as:\n",
                "\n",
                "    scipy.integrate.odeint(func, y0, t, args=(), ....)\n",
                "        \n",
                "where\n",
                "func:     is a callable function which computes the first derivative (for each coupled equation).    \n",
                "y0 :      is the initial condition of the variable  (which is a vector like (x0, y0, z0)  in our case).   \n",
                "t:        is an array of the time points at which to calculate solutions   \n",
                "args:     are additional variables (other than x, y, z) needed in the function evaluation. i.e. $\\rho, \\sigma, \\beta$\n",
                "\n",
                "So the first thing to do is make a function which returns the first derivatives\n",
                "    "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# function to return the first derivatives\n",
                "# note that 'state' contains the x, y, z values\n",
                "\n",
                "def f1(state, t, rho, sigma, beta):\n",
                "    x, y, z = state                                                # unpack the state vector\n",
                "    return sigma * (y - x), x * (rho - z) - y, x * y - beta * z    # dx/dt, dy/dt, dz/dt"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Now let's use odeint to calculate the trajectory for 5000 timesteps in $0<t<50$, for initial conditions $(x_0, y_0, z_0) = (1, 1, 1)$\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "state0 = np.array([1.0, 1.0, 1.0])\n",
                "timesteps =5000\n",
                "t = np.linspace(0.0, 50.0, timesteps)\n",
                "states = odeint(f1, state0, t, args=(frho, fsigma, fbeta))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "What's the output of odeint into the states variable?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(states.shape)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "An array of size    (time steps) x (size of state0).   \n",
                "So, e.g. the column\n",
                "\n",
                "    states[:, 0]\n",
                "is the x-coordinate at all time steps.\n",
                "\n",
                "Let's plot this...\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# plot of x vs t\n",
                "fig=plt.figure()\n",
                "ax=fig.add_subplot(111)\n",
                "ax.plot(t, states[:,0])\n",
                "ax.set_xlabel('x(t)')\n",
                "ax.set_ylabel('t')\n",
                "\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# or y vs x\n",
                "\n",
                "fig=plt.figure()\n",
                "ax=fig.add_subplot(111)\n",
                "ax.plot(states[:,0], states[:,1])\n",
                "ax.set_xlabel('x(t)')\n",
                "ax.set_ylabel('t')\n",
                "\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "To properly view the trajectories, let's plot them in 3D"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig = plt.figure(figsize=(5,8))\n",
                "ax = fig.add_subplot(projection='3d')\n",
                "ax.plot(states[:,0], states[:,1], states[:,2], linewidth=1, rasterized=True)\n",
                "ax.set_xlabel('x')\n",
                "ax.set_ylabel('y')\n",
                "ax.set_zlabel('z')\n",
                "#ax.axis('off')\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig.savefig('lorenz1.png', dpi=200, bbox_inches='tight')"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Let's compare this to the trajectory from a _very slightly_ different starting point"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "state0b = np.array([1.001, 1.0, 1.0])\n",
                "statesb = odeint(f1, state0b, t, args=(frho, fsigma, fbeta))\n",
                "\n",
                "fig = plt.figure(figsize=(8,8))\n",
                "ax = fig.add_subplot(projection='3d')\n",
                "ax.plot(states[:,0], states[:,1], states[:,2], linewidth=1)\n",
                "ax.plot(statesb[:,0], statesb[:,1], statesb[:,2], linewidth=1)\n",
                "ax.set_xlabel('x')\n",
                "ax.set_ylabel('y')\n",
                "ax.set_zlabel('z')\n",
                "plt.show()\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "It is clear the trajectories diverge after some time.   \n",
                "Let's plot the distance between the two paths at each time step. \n",
                "\n",
                "To do this, we use the np.linalg.norm() method on the array  _statesb - states_.  \n",
                "Note that we restrict the norm to axis=1 (i.e. x,y,z) to return the distance at each time step (axis=0)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "distance = np.linalg.norm(statesb - states, axis=1)\n",
                "fig=plt.figure()\n",
                "ax=fig.add_subplot(111)\n",
                "ax.plot(t, distance)\n",
                "ax.set_xlabel('Time')\n",
                "ax.set_ylabel('Distance beween trajectories')\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Exercise:\n",
                "Create an animation showing the evolution of two nearby trajectories as a function of time.\n",
                "\n",
                "<br>"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Varying parameters\n",
                "\n",
                "\n",
                "Now let's look at the different trajectories that emerge when the parameters $\\rho, \\sigma, \\beta$ are allowed to vary.\n",
                "\n",
                "Consider a range of $N_\\rho$ different $\\rho$ values.  \n",
                "We want to calculate the trajectory for each, but avoid a for loop."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "rho_range = np.array([5, 15, 25, 50, 100, 125, 150, 200])"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Instead, extend the _state_ array to include $(x, y, z)$ for each value of $\\rho$.    \n",
                "Then solve $3  N_\\rho$ differential equations simultaneously with one call to _odeint_.\n",
                "\n",
                "Our initial state would then have dimensions $N_\\rho$ x 3.  \n",
                "The desired output state array would then be $N_\\rho$ x timesteps x 3.\n",
                "\n",
                "Note that odeint requires a vector for y0, and will output a 2D array at most.  \n",
                "We will have to flatten one of the dimensions to get the correct shape for each. "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "state0 =  np.array([1, 2, 3])\n",
                "state0c = (state0[:, np.newaxis] * np.ones_like(rho_range)).flatten()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "state0c is now a 1D array with ordering: $x_0, x_0, x_0 ...... y_0, y_0, y_0, ......, z_0, z_0, z_0$.\n",
                "\n",
                "We need to build a new version of the function that can deal with this, and multiple values of rho"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "def f2(state, t, rho_range, sigma, beta):\n",
                "    \n",
                "    # split the input state vector into 3 vectors for x, y, z.\n",
                "    x,y,z = state.reshape(3, rho_range.size)    \n",
                "    \n",
                "    #these evaluations can be done as vectors, as x[i], y[i], z[i] all refer to rho_range[i]\n",
                "    dx, dy, dz = sigma * (y - x), x * (rho_range - z) - y, x * y - beta * z  # derivatives\n",
                "    \n",
                "    #need to flatten the output vector\n",
                "    return np.array([dx, dy, dz]).flatten()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# calculate the trajectories for all values of rho simultaneously\n",
                "statec = odeint(f2, state0c, t, args=(rho_range, fsigma, fbeta))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# what shape is the output?\n",
                "print(statec.shape)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The data is in the shape (timesteps, rho_range x 3).   \n",
                "Let's reshape this into something easier to manage."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "statec = statec.reshape( (timesteps,  3, len(rho_range)) ).T"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "statec.shape"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The data can now be accessed as statec [rho_value , x/y/z, timestep].\n",
                "\n",
                "Let's plot all the trajectories together.   \n",
                "It can be useful to ignore the first 500 or so points on the trajectory.   \n",
                "(why? consider the dashed segments below)\n",
                "\n",
                "(note the different panels below have different scales)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(15, 6))\n",
                "\n",
                "starting_point=2000\n",
                "\n",
                "for i, rho in enumerate(rho_range):\n",
                "    ax = fig.add_subplot(2, 4, i+1, projection='3d')\n",
                "    ax.axis('off')\n",
                "    ax.grid(False)\n",
                "    ax.set_title( r'$\\rho = %.1lf $' % (rho_range[i]) , fontsize=16)\n",
                "    ax.plot( statec[i,0,:starting_point], statec[i,1,:starting_point], statec[i,2,:starting_point], '--', alpha=0.5 )\n",
                "    ax.plot( statec[i,0, starting_point:], statec[i,1,starting_point:], statec[i,2,starting_point:], c='b' )\n",
                "    \n",
                "    ax.set_xlim( statec[i,0, starting_point:].min(), statec[i,0, starting_point:].max())\n",
                "    ax.set_ylim( statec[i,1, starting_point:].min(), statec[i,1, starting_point:].max())\n",
                "    ax.set_zlim( statec[i,2, starting_point:].min(), statec[i,2, starting_point:].max())\n",
                "\n",
                "    \n",
                "    \n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Very different behaviour is seen for different values of $\\rho$.  \n",
                "At low $\\rho$, the trajectory is attracted to individual points.  \n",
                "Some values show convergence to periodic trajectories or _limit cycles_ ($\\rho=100, 150$).   \n",
                "At other values, $\\rho=25, 50, 125, 200$, aperiodic, chaotic behaviour emerges.  \n",
                "\n",
                "We would like to plot how the behaviour evolves as we vary $\\rho$.   \n",
                "This can be done with a bifurcation diagram, which shows the points visited or approached asympoptotically.\n",
                "\n",
                "Let's look at the $z$ component of the above trajectories for large $t$.\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(15, 6))\n",
                "\n",
                "starting_point=4000\n",
                "\n",
                "for i, rho in enumerate(rho_range):\n",
                "    ax = fig.add_subplot(2, 4, i+1,)\n",
                "    ax.set_title( r'$\\rho = %.1lf $' % (rho_range[i]) , fontsize=16)\n",
                "    ax.plot( t[starting_point:], statec[i,2,starting_point:], c='b' )\n",
                "    \n",
                "    ax.set_xlabel('t')\n",
                "    ax.set_ylabel('z')\n",
                "\n",
                "    ax.set_ylim(-2, 300)\n",
                "    \n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "We can see the different periodicities more clearly here.  \n",
                "To plot the behaviour as a function of $\\rho$, we can extract the local maxima from these curves.\n",
                "\n",
                "This can be extracted easily from numerical sets using the from argrelextrema tool in scipy.\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "from scipy.signal import argrelextrema"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "We need to specify the set, the comparison to perform (e.g. greater or less than), and an order.\n",
                "(The order is how many points to either side to consider when determining if a point is a local extremum).  \n",
                "For example, for the $\\rho=25$ curve, the indices corresponding to local maxima in $z$ are given by"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "zmax = argrelextrema(statec[2,2,:], np.greater, order=2) [0]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(12, 4))\n",
                "\n",
                "ax = fig.add_subplot(111)\n",
                "ax.plot( t[:], statec[2,2,:] )\n",
                "\n",
                "ax.plot( t[zmax], statec[2,2,zmax], 'o' )\n",
                "\n",
                "ax.set_xlabel('t')\n",
                "ax.set_ylabel('z')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(5, 5))\n",
                "\n",
                "ax = fig.add_subplot(111, projection='3d')\n",
                "#ax.plot( t[:], statec[2,2,:] )\n",
                "ax.plot( statec[2,0, :], statec[2,1,:], statec[2,2,:], )\n",
                "\n",
                "ax.plot( statec[2,0,zmax], statec[2,1,zmax], statec[2,2,zmax], 'o' )\n",
                "\n",
                "\n",
                "ax.set_xlabel('t')\n",
                "ax.set_ylabel('z')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Now let's plot the maximums found for each of the $\\rho$ values considered"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure()\n",
                "ax=fig.add_subplot(111)\n",
                "starting_point=4000\n",
                "\n",
                "for i, rho in enumerate(rho_range):\n",
                "    \n",
                "    zmax = argrelextrema(statec[i,2,starting_point:], np.greater, order=2) [0]\n",
                "\n",
                "    ax.plot( rho * np.ones_like(zmax) , statec[i,2,starting_point:][zmax], 'o', c='b' )\n",
                "    \n",
                "    ax.set_xlabel(r'$\\rho$')\n",
                "    ax.set_ylabel(r'$z_{ext}$')\n",
                "\n",
                "    \n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Finally, let's consider this for a wider range of $\\rho$ values, and map minima and maxima for each.   \n",
                "The cell below may take a minute or two to run"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "state0 = np.array([1.0, 1.0, 1.0])\n",
                "timesteps =5000\n",
                "t = np.linspace(0.0, 50.0, timesteps)\n",
                "rho_range = np.linspace(0.0, 350, 701)\n",
                "state0c = (state0[:, np.newaxis] * np.ones_like(rho_range)).flatten()\n",
                "statec = odeint(f2, state0c, t, args=(rho_range, fsigma, fbeta))\n",
                "statec = statec.reshape( (timesteps,  3, len(rho_range)) ).T"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(6,6))\n",
                "ax=fig.add_subplot(111)\n",
                "starting_point=2000\n",
                "\n",
                "for i, rho in enumerate(rho_range):\n",
                "    \n",
                "    zmax = argrelextrema(statec[i,2,starting_point:], np.greater, order=2) [0]\n",
                "    ax.plot( rho * np.ones_like(zmax) , statec[i,2,starting_point:][zmax], 'ko', markersize=0.05, alpha=0.5)\n",
                "    zmin = argrelextrema(statec[i,2,starting_point:], np.less, order=2) [0]\n",
                "    ax.plot( rho * np.ones_like(zmin) , statec[i,2,starting_point:][zmin], 'ko', markersize=0.05, alpha=0.5)\n",
                "    \n",
                "    ax.set_xlabel(r'$\\rho$', fontsize=14)\n",
                "    ax.set_ylabel(r'$z_{ext}$', fontsize=14)\n",
                "\n",
                "    \n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Can also run in more detail for interesting regions"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "state0 = np.array([1.0, 1.0, 1.0])\n",
                "timesteps =5000\n",
                "t = np.linspace(0.0, 50.0, timesteps)\n",
                "rho_range = np.linspace(145, 165, 501)\n",
                "state0c = (state0[:, np.newaxis] * np.ones_like(rho_range)).flatten()\n",
                "statec = odeint(f2, state0c, t, args=(rho_range, fsigma, fbeta))\n",
                "statec = statec.reshape( (timesteps,  3, len(rho_range)) ).T"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "fig=plt.figure(figsize=(10,10))\n",
                "ax=fig.add_subplot(111)\n",
                "starting_point=4000\n",
                "\n",
                "for i, rho in enumerate(rho_range):\n",
                "    \n",
                "    zmax = argrelextrema(statec[i,2,starting_point:], np.greater, order=2) [0]\n",
                "    ax.plot( rho * np.ones_like(zmax) , statec[i,2,starting_point:][zmax], 'ko', markersize=0.04, alpha=0.9)\n",
                "    zmin = argrelextrema(statec[i,2,starting_point:], np.less, order=2) [0]\n",
                "    ax.plot( rho * np.ones_like(zmin) , statec[i,2,starting_point:][zmin], 'ko', markersize=0.04, alpha=0.9)\n",
                "    \n",
                "    ax.set_xlabel(r'$\\rho$', fontsize=14)\n",
                "    ax.set_ylabel(r'$z_{ext}$', fontsize=14)\n",
                "    ax.set_ylim(50,150)\n",
                "    \n",
                "plt.tight_layout()\n",
                "plt.show()    "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3 (ipykernel)",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.11.4"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}
